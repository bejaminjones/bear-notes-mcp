name: Dependency Updates & Security

on:
  schedule:
    # Run weekly on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch: # Allow manual triggering

jobs:
  # Job 1: Security Vulnerability Scanning
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: |
          echo "## Security Audit Results" >> $GITHUB_STEP_SUMMARY
          npm audit --json > audit-results.json || true
          
          # Parse and format audit results
          node -e "
          const fs = require('fs');
          try {
            const audit = JSON.parse(fs.readFileSync('audit-results.json', 'utf8'));
            
            console.log('| Severity | Count |');
            console.log('|----------|-------|');
            console.log(\`| Critical | \${audit.metadata?.vulnerabilities?.critical || 0} |\`);
            console.log(\`| High | \${audit.metadata?.vulnerabilities?.high || 0} |\`);
            console.log(\`| Moderate | \${audit.metadata?.vulnerabilities?.moderate || 0} |\`);
            console.log(\`| Low | \${audit.metadata?.vulnerabilities?.low || 0} |\`);
            
            // Write to step summary
            const summary = [
              '| Severity | Count |',
              '|----------|-------|',
              \`| Critical | \${audit.metadata?.vulnerabilities?.critical || 0} |\`,
              \`| High | \${audit.metadata?.vulnerabilities?.high || 0} |\`,
              \`| Moderate | \${audit.metadata?.vulnerabilities?.moderate || 0} |\`,
              \`| Low | \${audit.metadata?.vulnerabilities?.low || 0} |\`
            ].join('\n');
            
            fs.appendFileSync(process.env.GITHUB_STEP_SUMMARY, summary + '\n');
            
            // Fail if critical or high vulnerabilities found
            const critical = audit.metadata?.vulnerabilities?.critical || 0;
            const high = audit.metadata?.vulnerabilities?.high || 0;
            
            if (critical > 0 || high > 0) {
              console.error(\`Found \${critical} critical and \${high} high severity vulnerabilities\`);
              process.exit(1);
            }
          } catch (error) {
            console.log('No security vulnerabilities found or audit completed successfully');
          }
          "

      - name: Check for known security advisories
        run: |
          # Check if any dependencies have known security issues
          npm ls --depth=0 --json > dependencies.json
          echo "Checking dependencies for known security issues..."

  # Job 2: Dependency Updates
  dependency-updates:
    name: Check Dependency Updates
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install npm-check-updates
        run: npm install -g npm-check-updates

      - name: Check for dependency updates
        run: |
          echo "## Dependency Update Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check for updates
          ncu --format group > update-report.txt || true
          
          if [ -s update-report.txt ]; then
            echo "### Available Updates:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat update-report.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "‚úÖ All dependencies are up to date!" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check for major version updates
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Major Version Updates Available:" >> $GITHUB_STEP_SUMMARY
          
          ncu --target major --format group > major-updates.txt || true
          
          if [ -s major-updates.txt ]; then
            echo "‚ö†Ô∏è Major version updates require manual review:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat major-updates.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "‚úÖ No major version updates available." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Store update reports
        uses: actions/upload-artifact@v4
        with:
          name: dependency-reports
          path: |
            update-report.txt
            major-updates.txt
          retention-days: 30

  # Job 3: Automated Minor/Patch Updates (if enabled)
  auto-update:
    name: Auto-update Dependencies
    runs-on: ubuntu-latest
    needs: [security-scan]
    if: github.repository_owner == 'your-username' # Replace with actual owner
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Install npm-check-updates
        run: npm install -g npm-check-updates

      - name: Update patch and minor versions
        run: |
          # Update only patch and minor versions (safer)
          ncu --target minor -u
          
          # Check if package.json was modified
          if git diff --quiet package.json; then
            echo "No updates available"
            echo "UPDATES_AVAILABLE=false" >> $GITHUB_ENV
          else
            echo "Updates found"
            echo "UPDATES_AVAILABLE=true" >> $GITHUB_ENV
          fi

      - name: Install updated dependencies
        if: env.UPDATES_AVAILABLE == 'true'
        run: npm install

      - name: Run tests after updates
        if: env.UPDATES_AVAILABLE == 'true'
        run: |
          npm run build
          npm test

      - name: Create Pull Request
        if: env.UPDATES_AVAILABLE == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: update dependencies (patch/minor)'
          title: 'üîÑ Automated dependency updates'
          body: |
            ## Automated Dependency Updates
            
            This PR contains automated updates for patch and minor dependency versions.
            
            ### Changes:
            - Updated dependencies to latest patch/minor versions
            - All tests pass with updated dependencies
            - No breaking changes expected
            
            ### Verification:
            - [x] Build successful
            - [x] Tests passing
            - [x] Security scan passed
            
            **Note**: This PR was created automatically. Please review the changes before merging.
          branch: automated-dependency-updates
          delete-branch: true

  # Job 4: License Compliance Check
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install license checker
        run: npm install -g license-checker

      - name: Check licenses
        run: |
          echo "## License Compliance Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Generate license report
          license-checker --json > licenses.json
          
          # Parse and check for problematic licenses
          node -e "
          const fs = require('fs');
          const licenses = JSON.parse(fs.readFileSync('licenses.json', 'utf8'));
          
          const problematicLicenses = ['GPL', 'AGPL', 'LGPL', 'CPAL', 'OSL'];
          const allowedLicenses = ['MIT', 'ISC', 'BSD', 'Apache', 'Unlicense', 'WTFPL'];
          
          let hasProblematic = false;
          let summary = '| Package | License | Status |\n|---------|---------|--------|\n';
          
          Object.entries(licenses).forEach(([pkg, info]) => {
            const license = info.licenses || 'Unknown';
            const isProblematic = problematicLicenses.some(p => license.includes(p));
            const isAllowed = allowedLicenses.some(a => license.includes(a));
            
            let status = '‚úÖ OK';
            if (isProblematic) {
              status = '‚ùå Problematic';
              hasProblematic = true;
            } else if (!isAllowed && license !== 'Unknown') {
              status = '‚ö†Ô∏è Review';
            }
            
            summary += \`| \${pkg} | \${license} | \${status} |\n\`;
          });
          
          fs.appendFileSync(process.env.GITHUB_STEP_SUMMARY, summary);
          
          if (hasProblematic) {
            console.error('Found dependencies with problematic licenses');
            process.exit(1);
          }
          "

      - name: Store license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: licenses.json
          retention-days: 90 