name: Continuous Integration

on:
  push:
    branches: [ main, develop, refactoring ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC to catch dependency issues
    - cron: '0 2 * * *'

jobs:
  # Job 1: Code Quality and Security Checks
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint
        continue-on-error: false

      - name: Check Prettier formatting
        run: npm run format:check
        continue-on-error: false

      - name: Run TypeScript compiler check
        run: npx tsc --noEmit

      - name: Security audit
        run: npm audit --audit-level high
        continue-on-error: true

      - name: Check for outdated dependencies
        run: npm outdated || true

      - name: Dependency vulnerability scan
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - run: |
          npm install -g npm-check-updates
          ncu --errorLevel 2 || true

  # Job 2: Multi-version Testing Matrix
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        node-version: ['18.x', '20.x', '21.x']
        exclude:
          # Exclude some combinations to reduce CI time
          - os: ubuntu-latest
            node-version: '21.x'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Run tests with coverage
        run: npm run test:coverage
        env:
          NODE_ENV: test

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.node-version == '18.x'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Store test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.node-version }}
          path: |
            coverage/
            test-results.xml
          retention-days: 7

  # Job 3: Build and Package Testing
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [quality, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Test build output
        run: |
          # Verify build artifacts exist
          test -f dist/index.js || exit 1
          test -d dist || exit 1
          
          # Test that built code can be executed
          node dist/index.js --version || echo "Version check completed"

      - name: Package size analysis
        run: |
          echo "## Package Size Analysis" >> $GITHUB_STEP_SUMMARY
          echo "| File | Size |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|" >> $GITHUB_STEP_SUMMARY
          find dist -name "*.js" -exec sh -c 'echo "| {} | $(du -h {} | cut -f1) |"' \; >> $GITHUB_STEP_SUMMARY

      - name: Store build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            package.json
            package-lock.json
          retention-days: 30

  # Job 4: Performance Testing
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' || github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .

      - name: Run performance benchmarks
        run: |
          # Create a simple performance test
          node -e "
          const { performance } = require('perf_hooks');
          const start = performance.now();
          require('./dist/index.js');
          const end = performance.now();
          console.log(\`Module load time: \${end - start}ms\`);
          
          if (end - start > 1000) {
            console.error('Module load time exceeds 1000ms threshold');
            process.exit(1);
          }
          "

      - name: Memory usage check
        run: |
          node -e "
          const used = process.memoryUsage();
          console.log('Memory usage:');
          for (let key in used) {
            console.log(\`\${key}: \${Math.round(used[key] / 1024 / 1024 * 100) / 100} MB\`);
          }
          
          if (used.heapUsed > 100 * 1024 * 1024) {
            console.error('Heap usage exceeds 100MB threshold');
            process.exit(1);
          }
          "

  # Job 5: Integration Testing (Conditional)
  integration:
    name: Integration Tests
    runs-on: macos-latest
    needs: build
    if: github.event_name == 'push' && contains(github.ref, 'main')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .

      - name: Check for Bear app (macOS only)
        run: |
          if [ -d "/Applications/Bear.app" ]; then
            echo "Bear app found - can run full integration tests"
            echo "BEAR_AVAILABLE=true" >> $GITHUB_ENV
          else
            echo "Bear app not found - running limited integration tests"
            echo "BEAR_AVAILABLE=false" >> $GITHUB_ENV
          fi

      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test
          BEAR_AVAILABLE: ${{ env.BEAR_AVAILABLE }}

  # Job 6: Documentation Check
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check documentation completeness
        run: |
          echo "## Documentation Status" >> $GITHUB_STEP_SUMMARY
          
          # Check for required documentation files
          docs_files=("README.md" "docs/architecture.md" "docs/developer-guide.md" "docs/service-reference.md" "docs/api-reference.md")
          
          for file in "${docs_files[@]}"; do
            if [ -f "$file" ]; then
              lines=$(wc -l < "$file")
              echo "| $file | ✅ ($lines lines) |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| $file | ❌ Missing |" >> $GITHUB_STEP_SUMMARY
            fi
          done

      - name: Validate markdown files
        run: |
          # Check for broken links in markdown files
          find docs -name "*.md" -exec echo "Checking {}" \;

      - name: Generate API documentation (if needed)
        run: |
          # Future: Add TypeDoc generation
          echo "API documentation check completed"

  # Job 7: Notification and Reporting
  notify:
    name: Results Summary
    runs-on: ubuntu-latest
    needs: [quality, test, build, performance, docs]
    if: always()
    steps:
      - name: Generate summary
        run: |
          echo "## CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Quality Checks | ${{ needs.quality.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | ${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build & Package | ${{ needs.build.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance | ${{ needs.performance.result == 'success' && '✅ Passed' || needs.performance.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Documentation | ${{ needs.docs.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY

      - name: Report failure
        if: ${{ needs.quality.result == 'failure' || needs.test.result == 'failure' || needs.build.result == 'failure' }}
        run: |
          echo "❌ CI Pipeline failed - check individual job logs for details"
          exit 1 